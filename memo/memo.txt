■起動手順
  ▼ローカル
    アプリ起動
      nodemon [監視するディレクトリ]でサーバを起動し、npm install ~するときだけcontroll + cでサーバを停止
      npm install ~したあとはnodemon [監視するディレクトリ]でサーバーを起動
      →[Sun Oct 22 16:12:23]text_node_express_mysql Dmill$ nodemon text_node_express_mysql
    画面アクセス
      localhost:3000
    MySQL起動(ローカル)
      $ mysql.server start
  ▼サーバ
    AWSコンソールへのログイン
    AWSのマネジメントコンソールにログインする
      名前：各個人名
      パス：awsstudy@20170830
    リージョンが東京であることを確認する

    EC2の作成
      マネジメントコンソールからEC2を選択する
      インスタンス一覧を確認する
      AMI一覧を開く
      事前に用意したAMIを選択し、作成ボタンを押下する
      画面にしたがって設定していく
        Nameタグ
          AWS_Workshop_02_test
        セキュリティグループ 名前はキーNameと一緒
          HTTP  80  0.0.0.0/0, ::/0
          SSH  22  マイIP
          カスタムTCP :3000 任意の場所をソースに
        既存のキーペアを選択：AWS_Workshop_02
      作成ボタンを押下する
      一覧から、自分のインスタンスが作成中であることを確認する
      インスタンス詳細でセキュリティグループを選択する

    EC2_2台目の作成
      Nameタグ
        AWS_Workshop_02_test_sub
      セキュリティグループ
        デフォルト(1台目と〃)

    ELBの作成
      名前
        AWS-Workshop-02-test
      スキーマ
        インターネット向け
      IPアドレスタイプ
        ipv4
      AZ
        VPCはデフォルトの
        AZは1a1c両方
      セキュリティグループ
        AWS-Workshop-02-test
      ターゲットグループ
        名前
          AWSWorkshop02Test
        ほかはそのまま
      2台のEC2を3000番で指定して「登録済み」押下

    RDSセキュリティグループの作成
      EC2のセキュリティグループを確認する
      セキュリティグループ名（英語のやつ）をコピー
        AWS_Workshop_02_test
      新しいセキュリティグループを作成する
        ・MySQL：EC2のセキュリティグループ←VPCをデフォルトのvpc-b523fなんちゃらに
        ・Name、グループ名：AWS_Workshop_02_RDS
          これではないハズ→AWS_Workshop_02_test
        ・インバウンド
          MySQL TCP:3306 任意の場所をソースに

    RDSの作成
      マネジメントコンソールからRDSを選択する
      インスタンス一覧を確認する
      作成ボタンを押下する
      画面にしたがって設定していく
        ・MySQLを選択
        ・開発用を選択
        ・ＤＢインスタンス識別子、ユーザー名、パスワード等々は全部同じ
          awsworkshop02
        ・ＤＢ名
          bulletin_board
        ・VPC：デフォルトのvpc-b523f3d0
        ・セキュリティグループ：AWS_Workshop_02_RDS
      一覧から、自分のインスタンスが作成中であることを確認する

    EC2への接続
      マネジメントコンソールからEC2を選択する
      インスタンス一覧を確認する
      自分のインスタンスが準備完了であることを確認する
      chmod 600 .ssh/AWS_Workshop_02.pem
      ssh -i .ssh/AWS_Workshop_02.pem ec2-user@52.193.50.243

    EC2セットアップ
      sudo yum install git -y
      sudo yum install openssl-devel -y
      sudo yum install gcc-c++ -y
      sudo yum install make -y
        ↑既に最新だったため何もしてないぽい
      sudo yum install mysql

      ndenv
      git clone https://github.com/riywo/ndenv ~/.ndenv
      echo 'export PATH="$HOME/.ndenv/bin:$PATH"' >> ~/.bash_profile
      echo 'eval "$(ndenv init -)"' >> ~/.bash_profile
      echo 'export PATH="$HOME/.ndenv/bin:$PATH"' >> ~/.bashrc
      echo 'eval "$(ndenv init -)"' >> ~/.bashrc
      exec $SHELL -l
      ndenv -v

      node.js
      git clone https://github.com/riywo/node-build.git ~/.ndenv/plugins/node-build
      ndenv install -l
      ndenv install v8.7.0
      ndenv rehash
      ndenv versions
      ndenv global v8.7.0

    MYSQL接続
      mysql --host=awsworkshop02.cptxi3ftleus.ap-northeast-1.rds.amazonaws.com -port=3306 -u awsworkshop02 -pawsworkshop02
      show databases;
      use bulletin_board;
        ↑接続のときに指定しよう
      show tables;
      select * from boards;
        Empty set (0.00 sec)

    git crone鍵
      ssh-keygen -t rsa
        パスフレーズとか、入力せずEnter押下
      cat ~/.ssh/id_rsa.pub
        GitHubで以下のデプロイキーに登録
          EC2 AWS_Workshop_02_#01
      GitHubからクローン
      git@github.com:kishimon/text_node_express_mysql.git

    db接続設定
    vi text_node_express_mysql/mysqlConnection.js
      ホスト
        awsworkshop02.cptxi3ftleus.ap-northeast-1.rds.amazonaws.com
      ユーザ、PW
        awsworkshop02
      DB
        bulletin_board

    アプリ起動
      cd text_node_express_mysql
      npm install -g -S moment
      npm install -g -S mysql
      node ./bin/www

    アプリ停止
      ps aux | grep node
      kill -9 <PROCESS_ID>

    画面アクセス
    http://52.192.154.186:3000
    http://52.68.5.174:3000

    EC2直で画面アクセス
      EC2_1のアプリ起動
        ssh -i .ssh/AWS_Workshop_02.pem ec2-user@52.192.154.186
        cd text_node_express_mysql
        node ./bin/www
      EC2_2のアプリ起動
        ssh -i .ssh/AWS_Workshop_02.pem ec2-user@52.68.5.174
        cd text_node_express_mysql
        node ./bin/www
    ELB経由で画面アクセス
      http://aws-workshop-02-test-55760466.ap-northeast-1.elb.amazonaws.com/
    express(不要？)
    npm install express-generator -g
■ソース
  ▼依存関係
    moment.jsとか、全部グローバル(-g)でインストールして使おう
    ・moment.js
    ・MySQL
  ▼ディレクトリ(ローカル)
    /Users/Dmill/Dropbox/01_codes/text_node_express_mysql
  ▼個別
    routes/index.js
      ・res.render()のviewファイル
        app.jsのapp.set()により'views'と定められたviewフォルダ(path.join(__dirname, 'views')配下の'index'
        →即ちindex.ejs
      ・情報の進み方
        ブラウザから送信されたものは、index.ejsにまず行く？index.ejsとindex.jsはどっちが先に参照される？どっちからどっちが呼び出される？
    views.index.ejs
      ボードの見た目、もっと縦を詰めて行を増やす
    index.js
      EC2のIPを出力・MySQLに送ることで、ELBの証明
■エラー
  Error: Can't set headers after they are sent.
    あるルートの中で一度レスポンスを返した場合に、別のレスポンスを返そうとした場合に発生するエラー
    Node.jsではノンブロッキングI/Oという性質から、この場合でも同時に２つの返り値を出してしまうことがある。
    対処法は、なんてことはない。しっかりと分岐条件を分けて書くこと。
